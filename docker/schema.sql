-- MySQL Script generated by MySQL Workbench
-- Sun Aug 14 19:58:31 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_school
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `db_school` ;

-- -----------------------------------------------------
-- Schema db_school
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_school` DEFAULT CHARACTER SET utf8 ;
USE `db_school` ;

-- -----------------------------------------------------
-- Table `db_school`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`user` ;

CREATE TABLE IF NOT EXISTS `db_school`.`user` (
                                                  `id_user` INT NOT NULL AUTO_INCREMENT,
                                                  `name` VARCHAR(45) NULL,
    `surname` VARCHAR(45) NULL,
    `email` VARCHAR(45) NOT NULL,
    `hashed_password` VARCHAR(100) NOT NULL,
    `role` VARCHAR(45) NULL,
    `username` VARCHAR(45) NULL,
    `icon` VARCHAR(100) NULL,
    PRIMARY KEY (`id_user`),
    UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`teaching_lang`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`teaching_lang` ;

CREATE TABLE IF NOT EXISTS `db_school`.`teaching_lang` (
                                                           `id_teaching_lang` INT NOT NULL AUTO_INCREMENT,
                                                           `code` VARCHAR(3) NULL,
    `name` VARCHAR(45) NULL,
    PRIMARY KEY (`id_teaching_lang`),
    UNIQUE INDEX `code_UNIQUE` (`code` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`course` ;

CREATE TABLE IF NOT EXISTS `db_school`.`course` (
                                                    `id_course` INT NOT NULL AUTO_INCREMENT,
                                                    `points` INT NOT NULL,
                                                    `native_lang` VARCHAR(20) NULL,
    `description` VARCHAR(45) NULL,
    `id_teaching_lang` INT NOT NULL,
    `id_user` INT NOT NULL,
    PRIMARY KEY (`id_course`, `id_teaching_lang`),
    INDEX `fk_course_teaching_lang1_idx` (`id_teaching_lang` ASC) VISIBLE,
    INDEX `fk_course_user1_idx` (`id_user` ASC) VISIBLE,
    CONSTRAINT `fk_course_teaching_lang1`
    FOREIGN KEY (`id_teaching_lang`)
    REFERENCES `db_school`.`teaching_lang` (`id_teaching_lang`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_course_user1`
    FOREIGN KEY (`id_user`)
    REFERENCES `db_school`.`user` (`id_user`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`question`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`question` ;

CREATE TABLE IF NOT EXISTS `db_school`.`question` (
                                                      `id_question` INT NOT NULL AUTO_INCREMENT,
                                                      `question` VARCHAR(1500) NOT NULL,
    `answ1` VARCHAR(250) NULL,
    `answ2` VARCHAR(250) NULL,
    `answ3` VARCHAR(250) NULL,
    `points` INT NOT NULL,
    `answ4` VARCHAR(250) NULL,
    PRIMARY KEY (`id_question`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`test` ;

CREATE TABLE IF NOT EXISTS `db_school`.`test` (
                                                  `id_test` INT NOT NULL AUTO_INCREMENT,
                                                  `question_count` INT NULL,
                                                  PRIMARY KEY (`id_test`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`test_to_question`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`test_to_question` ;

CREATE TABLE IF NOT EXISTS `db_school`.`test_to_question` (
                                                              `id_test_to_question` INT NOT NULL AUTO_INCREMENT,
                                                              `id_test` INT NOT NULL,
                                                              `id_question` INT NOT NULL,
                                                              `answ` VARCHAR(250) NULL,
    PRIMARY KEY (`id_test_to_question`, `id_test`, `id_question`),
    INDEX `fk_test_to_question_test1_idx` (`id_test` ASC) VISIBLE,
    INDEX `fk_test_to_question_question1_idx` (`id_question` ASC) VISIBLE,
    CONSTRAINT `fk_test_to_question_test1`
    FOREIGN KEY (`id_test`)
    REFERENCES `db_school`.`test` (`id_test`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_test_to_question_question1`
    FOREIGN KEY (`id_question`)
    REFERENCES `db_school`.`question` (`id_question`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_school`.`course_to_test`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `db_school`.`course_to_test` ;

CREATE TABLE IF NOT EXISTS `db_school`.`course_to_test` (
                                                            `id_course_to_test` INT NOT NULL,
                                                            `id_course` INT NOT NULL,
                                                            `id_test` INT NOT NULL,
                                                            PRIMARY KEY (`id_course_to_test`, `id_course`, `id_test`),
    INDEX `fk_course_to_test_course1_idx` (`id_course` ASC) VISIBLE,
    INDEX `fk_course_to_test_test1_idx` (`id_test` ASC) VISIBLE,
    CONSTRAINT `fk_course_to_test_course1`
    FOREIGN KEY (`id_course`)
    REFERENCES `db_school`.`course` (`id_course`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_course_to_test_test1`
    FOREIGN KEY (`id_test`)
    REFERENCES `db_school`.`test` (`id_test`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `db_school`.`user`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`user` (`id_user`, `name`, `surname`, `email`, `hashed_password`, `role`, `username`, `icon`) VALUES (1, 'Martin', 'Kvapil', 'm@gmail.com', 'TODO', 'admin', 'admin', NULL);
INSERT INTO `db_school`.`user` (`id_user`, `name`, `surname`, `email`, `hashed_password`, `role`, `username`, `icon`) VALUES (2, 'Jiri', 'Kvapil', 'j@gmail.com', 'TODO', 'user', 'user', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`teaching_lang`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`teaching_lang` (`id_teaching_lang`, `code`, `name`) VALUES (1, 'en', 'english');
INSERT INTO `db_school`.`teaching_lang` (`id_teaching_lang`, `code`, `name`) VALUES (2, 'de', 'german');
INSERT INTO `db_school`.`teaching_lang` (`id_teaching_lang`, `code`, `name`) VALUES (3, 'es', 'spanish');

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`course`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`course` (`id_course`, `points`, `native_lang`, `description`, `id_teaching_lang`, `id_user`) VALUES (1, 0, 'cz', 'course of english', 1, 2);
INSERT INTO `db_school`.`course` (`id_course`, `points`, `native_lang`, `description`, `id_teaching_lang`, `id_user`) VALUES (2, 0, 'cz', 'course of german', 2, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`question`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`question` (`id_question`, `question`, `answ1`, `answ2`, `answ3`, `points`, `answ4`) VALUES (1, 'car', 'auto', 'kolo', 'letadlo', 10, 'koloběžka');

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`test`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`test` (`id_test`, `question_count`) VALUES (1, 10);
INSERT INTO `db_school`.`test` (`id_test`, `question_count`) VALUES (2, 15);
INSERT INTO `db_school`.`test` (`id_test`, `question_count`) VALUES (3, 10);
INSERT INTO `db_school`.`test` (`id_test`, `question_count`) VALUES (4, 10);

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`test_to_question`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`test_to_question` (`id_test_to_question`, `id_test`, `id_question`, `answ`) VALUES (1, 1, 1, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `db_school`.`course_to_test`
-- -----------------------------------------------------
START TRANSACTION;
USE `db_school`;
INSERT INTO `db_school`.`course_to_test` (`id_course_to_test`, `id_course`, `id_test`) VALUES (1, 1, 1);
INSERT INTO `db_school`.`course_to_test` (`id_course_to_test`, `id_course`, `id_test`) VALUES (2, 1, 2);
INSERT INTO `db_school`.`course_to_test` (`id_course_to_test`, `id_course`, `id_test`) VALUES (3, 1, 3);

COMMIT;

